@page "/testpage/{testId}"
@using CheesyCroco.Data.Models
@using CheesyCroco.Data.Services
@inject QuestionService questionService
@inject ResultService resultService
@inject AnswerService answerService
@inject TestService testService

<PageTitle>Tests</PageTitle>

<h1>Cheesy Croco Tests</h1>

@if (sum == -1){
    @if (questions == null || answers == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="questions">
        <ul> 
            @foreach (var question in questions)
            {
                    if (question.testId == @TestId!)
                    {
                    <li>
                        <td>@question.text</td>  
                        @foreach (var answer in answers)
                        {
                                if (answer.questionId == question.Id)
                            {
                                <div class="answer_option">
                                    <button id="answer_option" class="btn btn-primary" @onclick="@(()=>attemptRates[question.questionIndex] = answer.score)">
                                        @answer.text
                                    </button>
                                </div>
                        
                            }
                        }
                    </li>
                }
            }
        </ul>
        </div>
        <div class="result">
            <button class="btn btn-primary" @onclick="CalculateSum">
                Узнать результат
                @attemptRates[0]
                @attemptRates[1]
                @attemptRates[2]
            </button>
        </div>
    
    }
}
else {
    <h3 style="padding-top: 40px;"> Ваш результат</h3>
    <div class="result_item">
        @foreach (var res in results)
        {
            if (res.testId == @TestId! && res.scoreMax >= sum && res.scoreMin <= sum)
            {
                saveNewPassesCount();
                saveNewResultUserCount(res.Id);
                <div class="result_heading">
                    <h2> @res.name</h2>
                </div>
                <div class="result_text">
                    <h3> @res.text </h3>
                </div>

                break;
            }
        }
    </div>

    <h3 style="padding-top: 40px;"> Оценитe наш тест </h3>

    <div class="rating-slider">
        <input type="range" min="1" max="5" value="3" step="1">
    </div>

    <h3 style="padding-top: 40px;">
        Посмотрите результаты других людей)
    </h3>
    <div class="results">
        <ul>
            @foreach (var result in results)
            {
                if (result.testId == @TestId!)
                {
                    <li>
                        <td>@result.name - @result.userCount</td>
                    </li>
                }
            }
        </ul>
    </div>
}


@code {
    private Question[] questions;
    private Answer[] answers;
    private Result[] results;
    private int[] attemptRates;
    private int sum;

    [Parameter]
    public string? TestId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        sum = -1;



        if (testService.connect() && questionService.connect() && answerService.connect() && resultService.connect())
        {
            questions = await questionService.GetTestAsync();
            answers = await answerService.GetTestAsync();
            results = await resultService.GetTestAsync();
            attemptRates = new int[questions.Length];
        }
        else
        {
            questions = await Task.FromResult(Enumerable.Range(1, 5).Select(index => new Question
                {
                    text = "",
                    testId = "",
                    answersNum = 0,
                    questionIndex = 0

                }).ToArray());

        }
    }

    protected void CalculateSum()
    {
        foreach (int i in attemptRates) sum += i;
    }

    protected void saveNewRate()
    {
        testService.SetNewRating(TestId, 0);
    }

    protected void saveNewPassesCount()
    {
        testService.SetNewPassesCount(TestId);
    }

    protected void saveNewResultUserCount(string resId)
    {
        resultService.SetNewResultUserCount(resId);
    }

}
